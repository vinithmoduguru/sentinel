services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: sentinel
      POSTGRES_PASSWORD: sentinel
      POSTGRES_DB: sentinel_db
    # Expose to host only if you need local access; remove ports in production
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentinel -d sentinel_db"]
      interval: 5s
      retries: 5

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"

  seed:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://sentinel:sentinel@postgres:5432/sentinel_db
      TXN_COUNT: "200000"
      BATCH_SIZE: "10000"
    volumes:
      - ./backend:/app
      - ./fixtures:/app/fixtures
    command: sh -lc "npm ci && npm run seed:compose"
    restart: "no" # Run once and exit

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      seed:
        condition: service_completed_successfully
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: postgres://sentinel:sentinel@postgres:5432/sentinel_db
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
      EVALS_DIR: /app/fixtures/evals
      AGENT_API_KEY: agent_secret_123
      LEAD_API_KEY: lead_secret_456
    # For local development you can mount the source. Remove the volume for production images.
    volumes:
      - ./backend:/app
      - ./fixtures:/app/fixtures
    command: sh -lc "npm ci && npm run dev"

  web:
    build:
      context: ./front-end/vite-project
      dockerfile: Dockerfile
    depends_on:
      - api
    ports:
      - "5173:5173"
    environment:
      # When running in the same compose network, use the service name 'api'
      VITE_API_BASE_URL: http://api:4000
    volumes:
      - ./front-end/vite-project:/app
    command: sh -c "npm install && npm run dev"

  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    depends_on:
      - api

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
